{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/Universe.js","webpack:///./js/Game.js","webpack:///./app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","js_Universe","[object Object]","options","this","cells","height","uniHeight","length","uniLength","cellHeight","cellLength","push","Array","j","id","state","x","y","neighbours","transitions","self","cell","cellsToChange","universe","neighboursAlive","neighbourID","getCellById","changeCells","ctx","fillStyle","fillRect","row","Math","floor","column","js_Game","timer","canvas","context","universeElem","document","getElementById","speed","stopListener","stop","bind","playListener","play","loopCellsListener","e","pageX","offsetLeft","pageY","offsetTop","apply","loadListener","load","saveListener","save","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","JSON","parse","localStorage","getItem","assign","stringify","setItem","disabled","startBtn","saveBtn","loadBtn","addEventListener","stopBtn","removeEventListener","setInterval","preventDefault","clearInterval","iniSetup","getContext","create"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class Universe {\n    constructor(options) {\n        // this will be the tilemap, 2D matrix representing the universe\n        this.cells = [];\n        this.height = options.uniHeight;\n        this.length = options.uniLength;\n        this.cellHeight = options.cellHeight;\n        this.cellLength = options.cellLength;\n    }\n\n    create() {\n        // Assign the tilemap in relation with the length and height of the \n        // universe.\n        for (let i = 0; i < this.height; i++) {\n            this.cells.push(new Array());\n            for (let j = 0; j < this.length; j++) {\n                // assign each cell a structure with the id, state and \n                // coordinates of that cell\n                const id = i * this.length+j;\n                this.cells[i].push({\n                    id, \n                    state:0,\n                    x:j*this.cellLength,\n                    y:i*this.cellHeight,\n                    neighbours: [\n                        // top neighbours\n                        id - this.length - 1, id - this.length, id - this.length + 1,\n                        // side neigbours\n                        id - 1, id + 1,\n                        // bottom neigbours\n                        id + this.length - 1, id + this.length, id + this.length + 1 \n                    ]\n                });\n            }\n        }\n    }\n}\n\nexport default Universe;","class Game {\n    // set up instance variables\n    constructor(options) {\n        this.timer = null;\n        this.canvas = options.canvas;\n        this.ctx = options.context;\n        this.universe = options.universe;\n        this.universeElem = document.getElementById('universe');\n        this.speed = options.speed;\n\n        // store refeences to bound listeners since otherwise you can't remove the listeners\n        this.stopListener = this.stop.bind(this);\n        this.playListener = this.play.bind(this);\n        this.loopCellsListener = loopCells.bind(this);\n        this.loadListener = this.load.bind(this);\n        this.saveListener = this.save.bind(this);\n\n        drawGrid.apply(this);\n    }\n\n    load() {\n        const cells =  JSON.parse(localStorage.getItem('cells'));\n        \n        if (cells && cells.length === this.universe.length) {\n            // assign the loaded cells to the grid\n            Object.assign(this.universe.cells, cells);\n            // loop over grid and paint loaded cells\n            for (let i = 0; i < this.universe.height; i++) {\n                for (let j=0; j < this.universe.length; j++) {\n                    const cell = this.universe.cells[i][j];\n                    this.ctx.fillStyle = (cell.state) ? '#333' : 'white';\n                    this.ctx.fillRect(cell.x + 1,\n                                      cell.y + 1,\n                                      this.universe.cellLength - 2,\n                                      this.universe.cellHeight - 2\n                    );\n                }\n            }\n\n        } \n    }\n\n    save() {\n        const cells = JSON.stringify(this.universe.cells);\n        localStorage.setItem('cells', cells);\n        document.getElementById('load').disabled = false;\n    }\n\n    // initial setup\n    iniSetup() {\n        const startBtn = document.getElementById('start');\n        const saveBtn = document.getElementById('save');\n        const loadBtn = document.getElementById('load');\n        this.universeElem.addEventListener('click', this.loopCellsListener);\n        // when user click, start the game\n        startBtn.addEventListener('click', this.playListener);\n        startBtn.disabled = false;\n\n        saveBtn.addEventListener('click', this.saveListener);\n        loadBtn.addEventListener('click', this.loadListener);\n        if (!localStorage.getItem('cells')) {\n            loadBtn.disabled = true;\n        }\n    }\n\n    // start the game\n    play(e) {\n        const startBtn = document.getElementById('start');\n        const stopBtn = document.getElementById('stop');\n        // add click event to stop button\n        stopBtn.addEventListener('click', this.stopListener);\n        stopBtn.disabled = false;\n        // remove the play click listener\n        startBtn.removeEventListener('click', this.playListener);\n        startBtn.disabled = true;\n        // remove god mode\n        this.universeElem.removeEventListener('click', this.loopCellsListener);\n        // game loop, store handle for restart to stop the timer\n        this.timer = setInterval(step.bind(this), this.speed);\n        // if e isn't null then prevent default click behaviour\n        e && e.preventDefault();\n    }\n\n    // stop the game\n    stop(e) {\n        const stopBtn = document.getElementById('stop');\n        // remove restart listener, it'll be added again if game start clicked\n        stopBtn.removeEventListener('click', this.stopListener);\n        stopBtn.disabled = true;\n        // stop the timer\n        clearInterval(this.timer);\n        // reinitialise the game\n        this.iniSetup();\n        // if e isn't null then prevent default click behaviour\n        e && e.preventDefault();\n    }\n}\n\n// Private methods\n// --------------------\n// draw grid\nfunction drawGrid() {\n    this.ctx.strokeStyle = '#777';\n    this.ctx.lineWidth = 1;\n    // vertical lines\n    for (let i = 1; i<this.universe.length; i++) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.universe.cellLength * i, 0);\n        this.ctx.lineTo(this.universe.cellLength * i,\n                        this.universe.height * this.universe.cellHeight);\n        this.ctx.stroke();\n    }\n    // horizontal lines\n    for (let i = 1; i<this.universe.height; i++) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, this.universe.cellHeight * i);\n        this.ctx.lineTo(this.universe.length * this.universe.cellLength,\n                        this.universe.cellHeight * i);\n        this.ctx.stroke();\n    }\n}\n\n// Loop over the cells initialising cells when the grid is clicked\nfunction loopCells(e) {\n    const universeElem = this.universeElem;\n    const pageX = e.pageX - universeElem.offsetLeft;\n    const pageY = e.pageY - universeElem.offsetTop;\n\n    for (let i = 0; i < this.universe.height; i++) {\n        for (let j=0; j < this.universe.length; j++) {\n            const cell = this.universe.cells[i][j];\n            // handle the click\n            if (pageX > cell.x && pageX < cell.x + this.universe.cellLength &&\n                pageY > cell.y && pageY < cell.y + this.universe.cellHeight ) {\n                // chnage the cells\n                changeCells.apply(this, [cell]);\n            }\n        }\n    }\n}\n\n// 1 step = 1 generation\nfunction step() {\n    const self = this;\n    const cellsToChange = [];\n    for (let i = 0; i < this.universe.height; i++) {\n        for (let j=0; j < this.universe.length; j++) {\n            const cell = this.universe.cells[i][j];\n            transitions(self, cell, cellsToChange);\n        }\n    }\n\n    const lifeExists = cellsToChange.length > 0 ? true : false;\n\n    if (lifeExists === true) {\n        // update the cells that should be updated\n        for (let i=0; i<cellsToChange.length; i++) {\n            const cell = getCellById(self, cellsToChange[i]);\n            // if the cell state was 0 change to 1, and vice versa.\n            changeCells.apply(this, [cell]);\n        }\n    }\n    else {\n        this.stop(null);\n        // console.log('life has ceased!');\n    }\n}\n\n/*\n*   pass the cell through the 4 rules.\n    Note: cells should not update here, since altering 1 before you can\n    analyze the others will cause erroneous outcomes.\n*/\nfunction transitions(self, cell, cellsToChange) {\n    const uniLength = self.universe.length;\n    const uniHeight = self.universe.height;\n    let neighboursAlive = 0;\n    // Go through the neighbours of each cell.\n    for (let i = 0; i < 8; i++) {\n        const neighbourID = cell.neighbours[i];\n        if (neighbourID >= uniLength*uniHeight || neighbourID <0) {\n            continue;\n        }\n        const neighbour = getCellById(self, neighbourID);\n        if (neighbour.state === 1) {\n            neighboursAlive++;\n        }\n    }\n    if (cell.state === 1) {\n        // ze life rules\n        // -------------------\n        // 1) Any live cell with fewer than two live neighbours dies, as\n        // if caused by under-population.\n        // 2) Any live cell with two or three live neighbours lives on to\n        // the next generation.\n        if (neighboursAlive < 2) {\n            cellsToChange.push(cell.id);\n        }\n        // 3) Any live cell with more than three live neighbours dies, as if\n        // by overcrowding.\n        else if (neighboursAlive > 3) { \n            cellsToChange.push(cell.id);\n        }\n    }\n    else {\n        // 4) Any dead cell with exactly three live neighbours becomes a\n        // live cell, as if by reproduction.\n        if (neighboursAlive === 3) {\n            cellsToChange.push(cell.id);\n        }\n    }\n}\n\n// flip the state of a cell, changing its colour and its state\nfunction changeCells(cell) {\n    this.ctx.fillStyle = (cell.state) ? 'white' : '#333';\n    this.ctx.fillRect(cell.x+1,\n                      cell.y+1,\n                      this.universe.cellLength-2,\n                      this.universe.cellHeight-2\n                      );\n    cell.state = (cell.state) ? 0 : 1;\n}\n\nfunction getCellById(self, id) {\n    const row = Math.floor(id/self.universe.length);\n    const column = id % self.universe.length;\n    return self.universe.cells[row][column];\n}\n\nexport default Game;\n","import Universe from './js/Universe.js';\nimport Game from './js/Game.js';\n\n// in pixels\nconst CELL_LENGTH = 16;\nconst CELL_HEIGHT = 16;\n// in cell units\nconst UNIVERSE_LENGTH = 40;\nconst UNIVERSE_HEIGHT = 40;\n\nconst canvas = document.getElementById('universe');\nconst ctx = canvas.getContext('2d');\n\nconst universe = new Universe({\n    uniLength: UNIVERSE_LENGTH, \n    uniHeight: UNIVERSE_HEIGHT,\n    cellLength: CELL_LENGTH,\n    cellHeight: CELL_HEIGHT\n});\n\nuniverse.create();\n\nconst game = new Game({\n    // enhanced object literals\n    // 'canvas,' is the same as 'canvas: canvas,'\n    canvas,\n    context: ctx,\n    universe,\n    speed: 200\n});\n\ngame.iniSetup();\n\n"],"sourceRoot":""}